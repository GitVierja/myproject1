{"ast":null,"code":"import { Subscription, Observable } from 'rxjs';\nconst coalescingManager = createCoalesceManager();\nfunction hasKey(ctx, property) {\n  return ctx[property] != null;\n}\n/*\n * createPropertiesWeakMap\n *\n * @param getDefaults: (o: O) => P\n * Example:\n *\n * export interface Properties {\n *   isCoalescing: boolean;\n * }\n *\n * const obj: object = {\n *   foo: 'bar',\n *   isCoalescing: 'weakMap version'\n * };\n *\n * const getDefaults = (ctx: object): Properties => ({isCoalescing: false});\n * const propsMap = createPropertiesWeakMap<object, Properties>(getDefaults);\n *\n * console.log('obj before:', obj);\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\n * console.log('props before:', propsMap.getProps(obj));\n * // {isCoalescing: \"weakMap version\"}\n *\n * propsMap.setProps(obj, {isCoalescing: true});\n * console.log('obj after:', obj);\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\n * console.log('props after:', propsMap.getProps(obj));\n * // {isCoalescing: \"true\"}\n * */\nfunction createPropertiesWeakMap(getDefaults) {\n  const propertyMap = new WeakMap();\n  return {\n    getProps: getProperties,\n    setProps: setProperties\n  };\n  function getProperties(ctx) {\n    const defaults = getDefaults(ctx);\n    const propertiesPresent = propertyMap.get(ctx);\n    let properties;\n    if (propertiesPresent !== undefined) {\n      properties = propertiesPresent;\n    } else {\n      properties = {};\n      Object.entries(defaults).forEach(([prop, value]) => {\n        if (hasKey(ctx, prop)) {\n          properties[prop] = ctx[prop];\n        } else {\n          properties[prop] = value;\n        }\n      });\n      propertyMap.set(ctx, properties);\n    }\n    return properties;\n  }\n  function setProperties(ctx, props) {\n    const properties = getProperties(ctx);\n    Object.entries(props).forEach(([prop, value]) => {\n      properties[prop] = value;\n    });\n    propertyMap.set(ctx, properties);\n    return properties;\n  }\n}\nconst coalescingContextPropertiesMap = createPropertiesWeakMap(ctx => ({\n  numCoalescingSubscribers: 0\n}));\n/**\n * @describe createCoalesceManager\n *\n * returns a\n * Maintains a weak map of component references ans flags\n * them if the coalescing process is already started for them.\n *\n * Used in render aware internally.\n */\nfunction createCoalesceManager() {\n  return {\n    remove: removeWork,\n    add: addWork,\n    isCoalescing\n  };\n  // Increments the number of subscriptions in a scope e.g. a class instance\n  function removeWork(scope) {\n    const numCoalescingSubscribers = coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers - 1;\n    coalescingContextPropertiesMap.setProps(scope, {\n      numCoalescingSubscribers: numCoalescingSubscribers >= 0 ? numCoalescingSubscribers : 0\n    });\n  }\n  // Decrements the number of subscriptions in a scope e.g. a class instance\n  function addWork(scope) {\n    const numCoalescingSubscribers = coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers + 1;\n    coalescingContextPropertiesMap.setProps(scope, {\n      numCoalescingSubscribers\n    });\n  }\n  // Checks if anybody else is already coalescing atm\n  function isCoalescing(scope) {\n    return coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers > 0;\n  }\n}\n\n/**\n * @description\n * Limits the number of synchronous emitted a value from the source Observable to\n * one emitted value per\n *   durationSelector e.g. [`AnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame), then repeats\n * this process for every tick of the browsers event loop.\n *\n * The coalesce operator is based on the [throttle](https://rxjs-dev.firebaseapp.com/api/operators/throttle) operator.\n * In addition to that is provides emitted values for the trailing end only, as well as maintaining a context to scope\n *   coalescing.\n *\n * @param {function(value: T): Observable} durationSelector - A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * It defaults to `requestAnimationFrame` as durationSelector.\n * @param scope\n * Defaults to `{ leading: false, trailing: true }`. The default scoping is per subscriber.\n * @return {Observable<T>} An Observable that performs the coalesce operation to\n * limit the rate of emissions from the source.\n *\n * @usageNotes\n * Emit clicks at a rate of at most one click per second\n * ```typescript\n * import { interval, fromEvent } from 'rxjs';\n * import { coalesceWith } from '@rx-angular/cdk/coalescing';\n *\n * const setTimeoutDurationSelector = interval(500);\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(coalesceWith(setTimeoutDurationSelector));\n * result.subscribe(x => console.log(x));\n * ```\n */\nfunction coalesceWith(durationSelector, scope) {\n  const _scope = scope || {};\n  return source => {\n    return new Observable(observer => {\n      const rootSubscription = new Subscription();\n      rootSubscription.add(source.subscribe(createInnerObserver(observer, rootSubscription)));\n      return rootSubscription;\n    });\n    function createInnerObserver(outerObserver, rootSubscription) {\n      let actionSubscription;\n      let latestValue;\n      const tryEmitLatestValue = () => {\n        if (actionSubscription) {\n          // We only decrement the number if it is greater than 0 (isCoalescing)\n          coalescingManager.remove(_scope);\n          if (!coalescingManager.isCoalescing(_scope)) {\n            outerObserver.next(latestValue);\n          }\n        }\n      };\n      return {\n        complete: () => {\n          tryEmitLatestValue();\n          outerObserver.complete();\n        },\n        error: error => outerObserver.error(error),\n        next: value => {\n          latestValue = value;\n          if (!actionSubscription) {\n            coalescingManager.add(_scope);\n            actionSubscription = durationSelector.subscribe({\n              error: error => outerObserver.error(error),\n              next: () => {\n                tryEmitLatestValue();\n                actionSubscription?.unsubscribe();\n                actionSubscription = undefined;\n              },\n              complete: () => {\n                tryEmitLatestValue();\n                actionSubscription = undefined;\n              }\n            });\n            rootSubscription.add(new Subscription(() => {\n              tryEmitLatestValue();\n              actionSubscription?.unsubscribe();\n              actionSubscription = undefined;\n            }));\n          }\n        }\n      };\n    }\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { coalesceWith, coalescingManager };","map":{"version":3,"names":["Subscription","Observable","coalescingManager","createCoalesceManager","hasKey","ctx","property","createPropertiesWeakMap","getDefaults","propertyMap","WeakMap","getProps","getProperties","setProps","setProperties","defaults","propertiesPresent","get","properties","undefined","Object","entries","forEach","prop","value","set","props","coalescingContextPropertiesMap","numCoalescingSubscribers","remove","removeWork","add","addWork","isCoalescing","scope","coalesceWith","durationSelector","_scope","source","observer","rootSubscription","subscribe","createInnerObserver","outerObserver","actionSubscription","latestValue","tryEmitLatestValue","next","complete","error","unsubscribe"],"sources":["C:/Users/javie/KarateGit/myproject/node_modules/@rx-angular/cdk/fesm2022/rx-angular-cdk-coalescing.mjs"],"sourcesContent":["import { Subscription, Observable } from 'rxjs';\n\nconst coalescingManager = createCoalesceManager();\nfunction hasKey(ctx, property) {\n    return ctx[property] != null;\n}\n/*\n * createPropertiesWeakMap\n *\n * @param getDefaults: (o: O) => P\n * Example:\n *\n * export interface Properties {\n *   isCoalescing: boolean;\n * }\n *\n * const obj: object = {\n *   foo: 'bar',\n *   isCoalescing: 'weakMap version'\n * };\n *\n * const getDefaults = (ctx: object): Properties => ({isCoalescing: false});\n * const propsMap = createPropertiesWeakMap<object, Properties>(getDefaults);\n *\n * console.log('obj before:', obj);\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\n * console.log('props before:', propsMap.getProps(obj));\n * // {isCoalescing: \"weakMap version\"}\n *\n * propsMap.setProps(obj, {isCoalescing: true});\n * console.log('obj after:', obj);\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\n * console.log('props after:', propsMap.getProps(obj));\n * // {isCoalescing: \"true\"}\n * */\nfunction createPropertiesWeakMap(getDefaults) {\n    const propertyMap = new WeakMap();\n    return {\n        getProps: getProperties,\n        setProps: setProperties,\n    };\n    function getProperties(ctx) {\n        const defaults = getDefaults(ctx);\n        const propertiesPresent = propertyMap.get(ctx);\n        let properties;\n        if (propertiesPresent !== undefined) {\n            properties = propertiesPresent;\n        }\n        else {\n            properties = {};\n            Object.entries(defaults).forEach(([prop, value]) => {\n                if (hasKey(ctx, prop)) {\n                    properties[prop] = ctx[prop];\n                }\n                else {\n                    properties[prop] = value;\n                }\n            });\n            propertyMap.set(ctx, properties);\n        }\n        return properties;\n    }\n    function setProperties(ctx, props) {\n        const properties = getProperties(ctx);\n        Object.entries(props).forEach(([prop, value]) => {\n            properties[prop] = value;\n        });\n        propertyMap.set(ctx, properties);\n        return properties;\n    }\n}\nconst coalescingContextPropertiesMap = createPropertiesWeakMap((ctx) => ({\n    numCoalescingSubscribers: 0,\n}));\n/**\n * @describe createCoalesceManager\n *\n * returns a\n * Maintains a weak map of component references ans flags\n * them if the coalescing process is already started for them.\n *\n * Used in render aware internally.\n */\nfunction createCoalesceManager() {\n    return {\n        remove: removeWork,\n        add: addWork,\n        isCoalescing,\n    };\n    // Increments the number of subscriptions in a scope e.g. a class instance\n    function removeWork(scope) {\n        const numCoalescingSubscribers = coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers -\n            1;\n        coalescingContextPropertiesMap.setProps(scope, {\n            numCoalescingSubscribers: numCoalescingSubscribers >= 0 ? numCoalescingSubscribers : 0,\n        });\n    }\n    // Decrements the number of subscriptions in a scope e.g. a class instance\n    function addWork(scope) {\n        const numCoalescingSubscribers = coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers +\n            1;\n        coalescingContextPropertiesMap.setProps(scope, {\n            numCoalescingSubscribers,\n        });\n    }\n    // Checks if anybody else is already coalescing atm\n    function isCoalescing(scope) {\n        return (coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers >\n            0);\n    }\n}\n\n/**\n * @description\n * Limits the number of synchronous emitted a value from the source Observable to\n * one emitted value per\n *   durationSelector e.g. [`AnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame), then repeats\n * this process for every tick of the browsers event loop.\n *\n * The coalesce operator is based on the [throttle](https://rxjs-dev.firebaseapp.com/api/operators/throttle) operator.\n * In addition to that is provides emitted values for the trailing end only, as well as maintaining a context to scope\n *   coalescing.\n *\n * @param {function(value: T): Observable} durationSelector - A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * It defaults to `requestAnimationFrame` as durationSelector.\n * @param scope\n * Defaults to `{ leading: false, trailing: true }`. The default scoping is per subscriber.\n * @return {Observable<T>} An Observable that performs the coalesce operation to\n * limit the rate of emissions from the source.\n *\n * @usageNotes\n * Emit clicks at a rate of at most one click per second\n * ```typescript\n * import { interval, fromEvent } from 'rxjs';\n * import { coalesceWith } from '@rx-angular/cdk/coalescing';\n *\n * const setTimeoutDurationSelector = interval(500);\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(coalesceWith(setTimeoutDurationSelector));\n * result.subscribe(x => console.log(x));\n * ```\n */\nfunction coalesceWith(durationSelector, scope) {\n    const _scope = scope || {};\n    return (source) => {\n        return new Observable((observer) => {\n            const rootSubscription = new Subscription();\n            rootSubscription.add(source.subscribe(createInnerObserver(observer, rootSubscription)));\n            return rootSubscription;\n        });\n        function createInnerObserver(outerObserver, rootSubscription) {\n            let actionSubscription;\n            let latestValue;\n            const tryEmitLatestValue = () => {\n                if (actionSubscription) {\n                    // We only decrement the number if it is greater than 0 (isCoalescing)\n                    coalescingManager.remove(_scope);\n                    if (!coalescingManager.isCoalescing(_scope)) {\n                        outerObserver.next(latestValue);\n                    }\n                }\n            };\n            return {\n                complete: () => {\n                    tryEmitLatestValue();\n                    outerObserver.complete();\n                },\n                error: (error) => outerObserver.error(error),\n                next: (value) => {\n                    latestValue = value;\n                    if (!actionSubscription) {\n                        coalescingManager.add(_scope);\n                        actionSubscription = durationSelector.subscribe({\n                            error: (error) => outerObserver.error(error),\n                            next: () => {\n                                tryEmitLatestValue();\n                                actionSubscription?.unsubscribe();\n                                actionSubscription = undefined;\n                            },\n                            complete: () => {\n                                tryEmitLatestValue();\n                                actionSubscription = undefined;\n                            },\n                        });\n                        rootSubscription.add(new Subscription(() => {\n                            tryEmitLatestValue();\n                            actionSubscription?.unsubscribe();\n                            actionSubscription = undefined;\n                        }));\n                    }\n                },\n            };\n        }\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { coalesceWith, coalescingManager };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}