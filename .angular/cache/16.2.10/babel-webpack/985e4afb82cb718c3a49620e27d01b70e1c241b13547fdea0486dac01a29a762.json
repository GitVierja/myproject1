{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { map, distinctUntilChanged, tap, shareReplay } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./jwt.service\";\nimport * as i3 from \"@angular/router\";\nexport class UserService {\n  constructor(http, jwtService, router) {\n    this.http = http;\n    this.jwtService = jwtService;\n    this.router = router;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n    this.isAuthenticated = this.currentUser.pipe(map(user => !!user));\n  }\n  login(credentials) {\n    return this.http.post(\"/users/login\", {\n      user: credentials\n    }).pipe(tap(({\n      user\n    }) => this.setAuth(user)));\n  }\n  register(credentials) {\n    return this.http.post(\"/users\", {\n      user: credentials\n    }).pipe(tap(({\n      user\n    }) => this.setAuth(user)));\n  }\n  logout() {\n    this.purgeAuth();\n    void this.router.navigate([\"/\"]);\n  }\n  getCurrentUser() {\n    return this.http.get(\"/user\").pipe(tap({\n      next: ({\n        user\n      }) => this.setAuth(user),\n      error: () => this.purgeAuth()\n    }), shareReplay(1));\n  }\n  update(user) {\n    return this.http.put(\"/user\", {\n      user\n    }).pipe(tap(({\n      user\n    }) => {\n      this.currentUserSubject.next(user);\n    }));\n  }\n  setAuth(user) {\n    this.jwtService.saveToken(user.token);\n    this.currentUserSubject.next(user);\n  }\n  purgeAuth() {\n    this.jwtService.destroyToken();\n    this.currentUserSubject.next(null);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtService), i0.ɵɵinject(i3.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["BehaviorSubject","map","distinctUntilChanged","tap","shareReplay","UserService","constructor","http","jwtService","router","currentUserSubject","currentUser","asObservable","pipe","isAuthenticated","user","login","credentials","post","setAuth","register","logout","purgeAuth","navigate","getCurrentUser","get","next","error","update","put","saveToken","token","destroyToken","_","i0","ɵɵinject","i1","HttpClient","i2","JwtService","i3","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\javie\\KarateGit\\myproject\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\n\r\nimport { JwtService } from \"./jwt.service\";\r\nimport { map, distinctUntilChanged, tap, shareReplay } from \"rxjs/operators\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { User } from \"../models/user.model\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class UserService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser = this.currentUserSubject\r\n    .asObservable()\r\n    .pipe(distinctUntilChanged());\r\n\r\n  public isAuthenticated = this.currentUser.pipe(map((user) => !!user));\r\n\r\n  constructor(\r\n    private readonly http: HttpClient,\r\n    private readonly jwtService: JwtService,\r\n    private readonly router: Router\r\n  ) {}\r\n\r\n  login(credentials: {\r\n    email: string;\r\n    password: string;\r\n  }): Observable<{ user: User }> {\r\n    return this.http\r\n      .post<{ user: User }>(\"/users/login\", { user: credentials })\r\n      .pipe(tap(({ user }) => this.setAuth(user)));\r\n  }\r\n\r\n  register(credentials: {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n  }): Observable<{ user: User }> {\r\n    return this.http\r\n      .post<{ user: User }>(\"/users\", { user: credentials })\r\n      .pipe(tap(({ user }) => this.setAuth(user)));\r\n  }\r\n\r\n  logout(): void {\r\n    this.purgeAuth();\r\n    void this.router.navigate([\"/\"]);\r\n  }\r\n\r\n  getCurrentUser(): Observable<{ user: User }> {\r\n    return this.http.get<{ user: User }>(\"/user\").pipe(\r\n      tap({\r\n        next: ({ user }) => this.setAuth(user),\r\n        error: () => this.purgeAuth(),\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  update(user: Partial<User>): Observable<{ user: User }> {\r\n    return this.http.put<{ user: User }>(\"/user\", { user }).pipe(\r\n      tap(({ user }) => {\r\n        this.currentUserSubject.next(user);\r\n      })\r\n    );\r\n  }\r\n\r\n  setAuth(user: User): void {\r\n    this.jwtService.saveToken(user.token);\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  purgeAuth(): void {\r\n    this.jwtService.destroyToken();\r\n    this.currentUserSubject.next(null);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}