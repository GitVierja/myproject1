{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TagsService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll() {\n    return this.http.get(\"/tags\").pipe(map(data => data.tags));\n  }\n  static #_ = this.ɵfac = function TagsService_Factory(t) {\n    return new (t || TagsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TagsService,\n    factory: TagsService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["map","TagsService","constructor","http","getAll","get","pipe","data","tags","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\javie\\KarateGit\\myproject\\src\\app\\core\\services\\tags.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class TagsService {\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  getAll(): Observable<string[]> {\r\n    return this.http\r\n      .get<{ tags: string[] }>(\"/tags\")\r\n      .pipe(map((data) => data.tags));\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAIpC,OAAM,MAAOC,WAAW;EACtBC,YAA6BC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEhDC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,IAAI,CACbE,GAAG,CAAqB,OAAO,CAAC,CAChCC,IAAI,CAACN,GAAG,CAAEO,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC;EACnC;EAAC,QAAAC,CAAA,G;qBAPUR,WAAW,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXb,WAAW;IAAAc,OAAA,EAAXd,WAAW,CAAAe,IAAA;IAAAC,UAAA,EADE;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}