{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport class ErrorInterceptor {\n  intercept(req, next) {\n    return next.handle(req).pipe(catchError(err => throwError(() => err.error)));\n  }\n  static #_ = this.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["throwError","catchError","ErrorInterceptor","intercept","req","next","handle","pipe","err","error","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\javie\\KarateGit\\myproject\\src\\app\\core\\interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n} from \"@angular/common/http\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next\r\n      .handle(req)\r\n      .pipe(catchError((err) => throwError(() => err.error)));\r\n  }\r\n}\r\n"],"mappings":"AAOA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;AAG3C,OAAM,MAAOC,gBAAgB;EAC3BC,SAASA,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,OAAOA,IAAI,CACRC,MAAM,CAACF,GAAG,CAAC,CACXG,IAAI,CAACN,UAAU,CAAEO,GAAG,IAAKR,UAAU,CAAC,MAAMQ,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3D;EAAC,QAAAC,CAAA,G;qBARUR,gBAAgB;EAAA;EAAA,QAAAS,EAAA,G;WAAhBT,gBAAgB;IAAAU,OAAA,EAAhBV,gBAAgB,CAAAW,IAAA;IAAAC,UAAA,EADH;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}