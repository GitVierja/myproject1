{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ArticlesService {\n  constructor(http) {\n    this.http = http;\n  }\n  query(config) {\n    // Convert any filters over to Angular's URLSearchParams\n    let params = new HttpParams();\n    Object.keys(config.filters).forEach(key => {\n      // @ts-ignore\n      params = params.set(key, config.filters[key]);\n    });\n    return this.http.get(\"/articles\" + (config.type === \"feed\" ? \"/feed\" : \"\"), {\n      params\n    });\n  }\n  get(slug) {\n    return this.http.get(`/articles/${slug}`).pipe(map(data => data.article));\n  }\n  delete(slug) {\n    return this.http.delete(`/articles/${slug}`);\n  }\n  create(article) {\n    return this.http.post(\"/articles/\", {\n      article: article\n    }).pipe(map(data => data.article));\n  }\n  update(article) {\n    return this.http.put(`/articles/${article.slug}`, {\n      article: article\n    }).pipe(map(data => data.article));\n  }\n  favorite(slug) {\n    return this.http.post(`/articles/${slug}/favorite`, {}).pipe(map(data => data.article));\n  }\n  unfavorite(slug) {\n    return this.http.delete(`/articles/${slug}/favorite`);\n  }\n  static #_ = this.ɵfac = function ArticlesService_Factory(t) {\n    return new (t || ArticlesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArticlesService,\n    factory: ArticlesService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["HttpParams","map","ArticlesService","constructor","http","query","config","params","Object","keys","filters","forEach","key","set","get","type","slug","pipe","data","article","delete","create","post","update","put","favorite","unfavorite","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\javie\\KarateGit\\myproject\\src\\app\\core\\services\\articles.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { ArticleListConfig } from \"../models/article-list-config.model\";\r\nimport { Article } from \"../models/article.model\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class ArticlesService {\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  query(\r\n    config: ArticleListConfig\r\n  ): Observable<{ articles: Article[]; articlesCount: number }> {\r\n    // Convert any filters over to Angular's URLSearchParams\r\n    let params = new HttpParams();\r\n\r\n    Object.keys(config.filters).forEach((key) => {\r\n      // @ts-ignore\r\n      params = params.set(key, config.filters[key]);\r\n    });\r\n\r\n    return this.http.get<{ articles: Article[]; articlesCount: number }>(\r\n      \"/articles\" + (config.type === \"feed\" ? \"/feed\" : \"\"),\r\n      { params }\r\n    );\r\n  }\r\n\r\n  get(slug: string): Observable<Article> {\r\n    return this.http\r\n      .get<{ article: Article }>(`/articles/${slug}`)\r\n      .pipe(map((data) => data.article));\r\n  }\r\n\r\n  delete(slug: string): Observable<void> {\r\n    return this.http.delete<void>(`/articles/${slug}`);\r\n  }\r\n\r\n  create(article: Partial<Article>): Observable<Article> {\r\n    return this.http\r\n      .post<{ article: Article }>(\"/articles/\", { article: article })\r\n      .pipe(map((data) => data.article));\r\n  }\r\n\r\n  update(article: Partial<Article>): Observable<Article> {\r\n    return this.http\r\n      .put<{ article: Article }>(`/articles/${article.slug}`, {\r\n        article: article,\r\n      })\r\n      .pipe(map((data) => data.article));\r\n  }\r\n\r\n  favorite(slug: string): Observable<Article> {\r\n    return this.http\r\n      .post<{ article: Article }>(`/articles/${slug}/favorite`, {})\r\n      .pipe(map((data) => data.article));\r\n  }\r\n\r\n  unfavorite(slug: string): Observable<void> {\r\n    return this.http.delete<void>(`/articles/${slug}/favorite`);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,eAAe;EAC1BC,YAA6BC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEhDC,KAAKA,CACHC,MAAyB;IAEzB;IACA,IAAIC,MAAM,GAAG,IAAIP,UAAU,EAAE;IAE7BQ,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC,CAACC,OAAO,CAAEC,GAAG,IAAI;MAC1C;MACAL,MAAM,GAAGA,MAAM,CAACM,GAAG,CAACD,GAAG,EAAEN,MAAM,CAACI,OAAO,CAACE,GAAG,CAAC,CAAC;IAC/C,CAAC,CAAC;IAEF,OAAO,IAAI,CAACR,IAAI,CAACU,GAAG,CAClB,WAAW,IAAIR,MAAM,CAACS,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,EAAE,CAAC,EACrD;MAAER;IAAM,CAAE,CACX;EACH;EAEAO,GAAGA,CAACE,IAAY;IACd,OAAO,IAAI,CAACZ,IAAI,CACbU,GAAG,CAAuB,aAAaE,IAAI,EAAE,CAAC,CAC9CC,IAAI,CAAChB,GAAG,CAAEiB,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC,CAAC;EACtC;EAEAC,MAAMA,CAACJ,IAAY;IACjB,OAAO,IAAI,CAACZ,IAAI,CAACgB,MAAM,CAAO,aAAaJ,IAAI,EAAE,CAAC;EACpD;EAEAK,MAAMA,CAACF,OAAyB;IAC9B,OAAO,IAAI,CAACf,IAAI,CACbkB,IAAI,CAAuB,YAAY,EAAE;MAAEH,OAAO,EAAEA;IAAO,CAAE,CAAC,CAC9DF,IAAI,CAAChB,GAAG,CAAEiB,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC,CAAC;EACtC;EAEAI,MAAMA,CAACJ,OAAyB;IAC9B,OAAO,IAAI,CAACf,IAAI,CACboB,GAAG,CAAuB,aAAaL,OAAO,CAACH,IAAI,EAAE,EAAE;MACtDG,OAAO,EAAEA;KACV,CAAC,CACDF,IAAI,CAAChB,GAAG,CAAEiB,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC,CAAC;EACtC;EAEAM,QAAQA,CAACT,IAAY;IACnB,OAAO,IAAI,CAACZ,IAAI,CACbkB,IAAI,CAAuB,aAAaN,IAAI,WAAW,EAAE,EAAE,CAAC,CAC5DC,IAAI,CAAChB,GAAG,CAAEiB,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC,CAAC;EACtC;EAEAO,UAAUA,CAACV,IAAY;IACrB,OAAO,IAAI,CAACZ,IAAI,CAACgB,MAAM,CAAO,aAAaJ,IAAI,WAAW,CAAC;EAC7D;EAAC,QAAAW,CAAA,G;qBApDUzB,eAAe,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf9B,eAAe;IAAA+B,OAAA,EAAf/B,eAAe,CAAAgC,IAAA;IAAAC,UAAA,EADF;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}