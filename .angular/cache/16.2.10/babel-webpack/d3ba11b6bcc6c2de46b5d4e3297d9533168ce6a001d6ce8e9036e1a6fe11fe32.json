{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CommentsService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll(slug) {\n    return this.http.get(`/articles/${slug}/comments`).pipe(map(data => data.comments));\n  }\n  add(slug, payload) {\n    return this.http.post(`/articles/${slug}/comments`, {\n      comment: {\n        body: payload\n      }\n    }).pipe(map(data => data.comment));\n  }\n  delete(commentId, slug) {\n    return this.http.delete(`/articles/${slug}/comments/${commentId}`);\n  }\n  static #_ = this.ɵfac = function CommentsService_Factory(t) {\n    return new (t || CommentsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommentsService,\n    factory: CommentsService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["map","CommentsService","constructor","http","getAll","slug","get","pipe","data","comments","add","payload","post","comment","body","delete","commentId","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\javie\\KarateGit\\myproject\\src\\app\\core\\services\\comments.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Comment } from \"../models/comment.model\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class CommentsService {\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  getAll(slug: string): Observable<Comment[]> {\r\n    return this.http\r\n      .get<{ comments: Comment[] }>(`/articles/${slug}/comments`)\r\n      .pipe(map((data) => data.comments));\r\n  }\r\n\r\n  add(slug: string, payload: string): Observable<Comment> {\r\n    return this.http\r\n      .post<{ comment: Comment }>(`/articles/${slug}/comments`, {\r\n        comment: { body: payload },\r\n      })\r\n      .pipe(map((data) => data.comment));\r\n  }\r\n\r\n  delete(commentId: string, slug: string): Observable<void> {\r\n    return this.http.delete<void>(`/articles/${slug}/comments/${commentId}`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,eAAe;EAC1BC,YAA6BC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEhDC,MAAMA,CAACC,IAAY;IACjB,OAAO,IAAI,CAACF,IAAI,CACbG,GAAG,CAA0B,aAAaD,IAAI,WAAW,CAAC,CAC1DE,IAAI,CAACP,GAAG,CAAEQ,IAAI,IAAKA,IAAI,CAACC,QAAQ,CAAC,CAAC;EACvC;EAEAC,GAAGA,CAACL,IAAY,EAAEM,OAAe;IAC/B,OAAO,IAAI,CAACR,IAAI,CACbS,IAAI,CAAuB,aAAaP,IAAI,WAAW,EAAE;MACxDQ,OAAO,EAAE;QAAEC,IAAI,EAAEH;MAAO;KACzB,CAAC,CACDJ,IAAI,CAACP,GAAG,CAAEQ,IAAI,IAAKA,IAAI,CAACK,OAAO,CAAC,CAAC;EACtC;EAEAE,MAAMA,CAACC,SAAiB,EAAEX,IAAY;IACpC,OAAO,IAAI,CAACF,IAAI,CAACY,MAAM,CAAO,aAAaV,IAAI,aAAaW,SAAS,EAAE,CAAC;EAC1E;EAAC,QAAAC,CAAA,G;qBAnBUhB,eAAe,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfrB,eAAe;IAAAsB,OAAA,EAAftB,eAAe,CAAAuB,IAAA;IAAAC,UAAA,EADF;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}