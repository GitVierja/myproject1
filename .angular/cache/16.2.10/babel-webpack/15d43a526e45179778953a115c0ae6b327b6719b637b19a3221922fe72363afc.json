{"ast":null,"code":"import { map, shareReplay } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProfileService {\n  constructor(http) {\n    this.http = http;\n  }\n  get(username) {\n    return this.http.get(\"/profiles/\" + username).pipe(map(data => data.profile), shareReplay(1));\n  }\n  follow(username) {\n    return this.http.post(\"/profiles/\" + username + \"/follow\", {}).pipe(map(data => data.profile));\n  }\n  unfollow(username) {\n    return this.http.delete(\"/profiles/\" + username + \"/follow\").pipe(map(data => data.profile));\n  }\n  static #_ = this.ɵfac = function ProfileService_Factory(t) {\n    return new (t || ProfileService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProfileService,\n    factory: ProfileService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["map","shareReplay","ProfileService","constructor","http","get","username","pipe","data","profile","follow","post","unfollow","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\javie\\KarateGit\\myproject\\src\\app\\core\\services\\profile.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map, shareReplay } from \"rxjs/operators\";\r\nimport { Profile } from \"../models/profile.model\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class ProfileService {\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  get(username: string): Observable<Profile> {\r\n    return this.http.get<{ profile: Profile }>(\"/profiles/\" + username).pipe(\r\n      map((data: { profile: Profile }) => data.profile),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  follow(username: string): Observable<Profile> {\r\n    return this.http\r\n      .post<{ profile: Profile }>(\"/profiles/\" + username + \"/follow\", {})\r\n      .pipe(map((data: { profile: Profile }) => data.profile));\r\n  }\r\n\r\n  unfollow(username: string): Observable<Profile> {\r\n    return this.http\r\n      .delete<{ profile: Profile }>(\"/profiles/\" + username + \"/follow\")\r\n      .pipe(map((data: { profile: Profile }) => data.profile));\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,EAAEC,WAAW,QAAQ,gBAAgB;;;AAKjD,OAAM,MAAOC,cAAc;EACzBC,YAA6BC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEhDC,GAAGA,CAACC,QAAgB;IAClB,OAAO,IAAI,CAACF,IAAI,CAACC,GAAG,CAAuB,YAAY,GAAGC,QAAQ,CAAC,CAACC,IAAI,CACtEP,GAAG,CAAEQ,IAA0B,IAAKA,IAAI,CAACC,OAAO,CAAC,EACjDR,WAAW,CAAC,CAAC,CAAC,CACf;EACH;EAEAS,MAAMA,CAACJ,QAAgB;IACrB,OAAO,IAAI,CAACF,IAAI,CACbO,IAAI,CAAuB,YAAY,GAAGL,QAAQ,GAAG,SAAS,EAAE,EAAE,CAAC,CACnEC,IAAI,CAACP,GAAG,CAAEQ,IAA0B,IAAKA,IAAI,CAACC,OAAO,CAAC,CAAC;EAC5D;EAEAG,QAAQA,CAACN,QAAgB;IACvB,OAAO,IAAI,CAACF,IAAI,CACbS,MAAM,CAAuB,YAAY,GAAGP,QAAQ,GAAG,SAAS,CAAC,CACjEC,IAAI,CAACP,GAAG,CAAEQ,IAA0B,IAAKA,IAAI,CAACC,OAAO,CAAC,CAAC;EAC5D;EAAC,QAAAK,CAAA,G;qBApBUZ,cAAc,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdjB,cAAc;IAAAkB,OAAA,EAAdlB,cAAc,CAAAmB,IAAA;IAAAC,UAAA,EADD;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}