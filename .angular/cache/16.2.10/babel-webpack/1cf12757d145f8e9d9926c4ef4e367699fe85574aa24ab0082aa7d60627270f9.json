{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/javie/KarateGit/myproject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class MarkdownPipe {\n  transform(content) {\n    return _asyncToGenerator(function* () {\n      const {\n        marked\n      } = yield import(\"marked\");\n      return marked(content, {\n        sanitize: true\n      });\n    })();\n  }\n  static #_ = this.ɵfac = function MarkdownPipe_Factory(t) {\n    return new (t || MarkdownPipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"markdown\",\n    type: MarkdownPipe,\n    pure: true,\n    standalone: true\n  });\n}","map":{"version":3,"names":["MarkdownPipe","transform","content","_asyncToGenerator","marked","sanitize","_","_2","pure","standalone"],"sources":["C:\\Users\\javie\\KarateGit\\myproject\\src\\app\\features\\article\\markdown.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({\r\n  name: \"markdown\",\r\n  standalone: true,\r\n})\r\nexport class MarkdownPipe implements PipeTransform {\r\n  async transform(content: string): Promise<string> {\r\n    const { marked } = await import(\"marked\");\r\n    return marked(content, { sanitize: true });\r\n  }\r\n}\r\n"],"mappings":";;AAMA,OAAM,MAAOA,YAAY;EACjBC,SAASA,CAACC,OAAe;IAAA,OAAAC,iBAAA;MAC7B,MAAM;QAAEC;MAAM,CAAE,SAAS,MAAM,CAAC,QAAQ,CAAC;MACzC,OAAOA,MAAM,CAACF,OAAO,EAAE;QAAEG,QAAQ,EAAE;MAAI,CAAE,CAAC;IAAC;EAC7C;EAAC,QAAAC,CAAA,G;qBAJUN,YAAY;EAAA;EAAA,QAAAO,EAAA,G;;UAAZP,YAAY;IAAAQ,IAAA;IAAAC,UAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}